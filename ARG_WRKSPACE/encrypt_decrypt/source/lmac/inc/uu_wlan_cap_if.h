/*******************************************************************************
**                                                                            **
** File name :        uu_wlan_cap_if.h                                        **
**                                                                            **
** Copyright Â© 2013, Uurmi Systems                                            **
** All rights reserved.                                                       **
** http://www.uurmi.com                                                       **
**                                                                            **
** All information contained herein is property of Uurmi Systems              **
** unless otherwise explicitly mentioned.                                     **
**                                                                            **
** The intellectual and technical concepts in this file are proprietary       **
** to Uurmi Systems and may be covered by granted or in process national      **
** and international patents and are protect by trade secrets and             **
** copyright law.                                                             **
**                                                                            **
** Redistribution and use in source and binary forms of the content in        **
** this file, with or without modification are not permitted unless           **
** permission is explicitly granted by Uurmi Systems.                         **
**                                                                            **
*******************************************************************************/

#ifndef __UU_WLAN_CAP_IF_H__
#define __UU_WLAN_CAP_IF_H__

#include "uu_datatypes.h"
#include "uu_wlan_frame.h"
#include "uu_wlan_phy_if.h"
#include "uu_wlan_rx_if.h"

#define UU_WLAN_CAP_Q_SIZE  30

UU_BEGIN_DECLARATIONS


/** Rx packet processing result to CAP module.
 * After receiving Rx-End indication, RX updates this value and posts the Rx-end to CAP.
 * Based on this, CAP state will be changed.
 */
extern uu_wlan_rx_handler_return_value_t uu_wlan_cap_rx_status_value_g;

/** List of Events given to CAP module.
 * These events are posted by - UMAC, Timer, PHY, Tx module, and internally during timer tick handling.
 */
typedef enum uu_wlan_cap_event_type
{
    /** MAC reset.
     * To Reset the CAP state machine, on MAC reset from UMAC.
     */
    UU_WLAN_CAP_EV_MAC_RESET = 0,

    /** Slot timer fired.
     * The 'slot time' value is dependent on both - PHY medium & AP config.
     */
    UU_WLAN_CAP_EV_TIMER_TICK,

    /** Tx Ready event.
     * Generated when tx_handler receives frame from umac into an empty AC Q.
     */
    UU_WLAN_CAP_EV_TX_READY,

    /*
     * PHY events - CONFIRM
     */

    /** Tx_start confirm event from phy.
     * Generated by PHY, in response to tx_start req.
     */
    UU_WLAN_CAP_EV_TX_START_CONFIRM,

    /** Tx_data confirm event from phy.
     * Generated by PHY, in response to tx_data req
     */
    UU_WLAN_CAP_EV_TX_DATA_CONFIRM,

    /** Tx_end confirm event from phy.
     * Generated by PHY, in response to tx_end req
     */
    UU_WLAN_CAP_EV_TX_END_CONFIRM,

    /*
     * PHY INDICATIONS
     */

    /** Phy energy level indication.
     * Phy generates this, whenever medium state switches between busy / idle.
     */
    UU_WLAN_CAP_EV_PHY_ENERGY_LEVEL,

    /** Rx_start indication.
     * Phy generates this, when PHY recognizes frame preamble.
     */
    UU_WLAN_CAP_EV_RX_START_IND,

    /** Data indication from PHY
     * PHY generate this, to pass received data to MAC.
     */
    UU_WLAN_CAP_EV_DATA_INDICATION,

    /** Successful Rx_end indication from PHY.
     * Deduced from RX_END indication of PHY.
     */
    UU_WLAN_CAP_EV_RX_END_IND, /* i.e. RX Frame Received */

    /** Phy rx error.
     *  Deduced from RX_END from PHY with error status.
     */
    UU_WLAN_CAP_EV_PHY_RX_ERR,

    /** CCA reset confirm from PHY.
     * This is PHY's confirmation for phycca.reset.req given by MAC.
     */
    UU_WLAN_CAP_EV_CCA_RESET_CONFIRM,
#if 0
    /* Rx handler events */
    UU_WLAN_CAP_EV_ACK_RCVD,
    UU_WLAN_CAP_EV_CTS_RCVD,
    UU_WLAN_CAP_EV_BA_RCVD,

    /** FCS error.
     * Returned in Rx frame processing, on FCS error.
     */
    UU_WLAN_CAP_EV_ERR_FRAME,

    /** NAV update needed.
     * Returned, if received frame RA is not to ours and FCS is valid.
     */
    UU_WLAN_CAP_EV_NAV_UPDATE,
#endif
    /** Start transmission event from contention module, If Txop own by us. */
    UU_WLAN_CAP_EV_TXOP_TX_START,

    /** A count the number of valid event types, and also used as invalid event.
     */
    UU_WLAN_CAP_EV_MAX
} uu_wlan_cap_event_type_t;


/** Tx_frame_ready event structure. */
typedef struct uu_wlan_cap_ev_tx_frame_ready
{
    /** AC of tx_frame_ready */
    uu_uchar       ac; /* 2 bits */
} uu_wlan_cap_ev_tx_frame_ready_t;

/** Cca_status confirm event structure. */
typedef struct uu_wlan_cap_ev_cca_status
{
    /** Cca status indication from phy */
    uu_uint8    status; /* 1 bit */
    /** Busy channel bands list */
    uu_wlan_busy_channel_list_t    channel_list; /* 3 bits */
} uu_wlan_cap_ev_cca_status_t;


/** Rx_start_ind event structure. */
typedef struct uu_wlan_cap_ev_rx_start_ind
{
    /** Rx_vec of received data */
    uu_wlan_rx_vector_t    rxvec;
} uu_wlan_cap_ev_rx_start_ind_t;

/** Rx_data ind event structure. */
typedef struct uu_wlan_cap_ev_rx_data_ind
{
    /** Complete frame received at phy */
    uu_uchar *frame_p;//frame[UU_WLAN_MAX_AMPDU_SZ]; /* TODO PLCP dependency */
    /** length of the frame */
    uu_int32 frame_len; /* 20 bits */
} uu_wlan_cap_ev_rx_data_ind_t;

/** Rx_end_indication event structure. */
typedef struct uu_wlan_cap_ev_rx_end_ind
{
    /** Status of rx_end_indication (including, error code) */
    uu_uchar ind; /* 2 bits (with PLCP dependency) */
} uu_wlan_cap_ev_rx_end_ind_t;

/* NOTE:: If edit the below Union, then chage this 'uu_wlan_put_msg_in_CAP_Q' function also */
/** Union of all event data structures */
typedef union uu_wlan_cap_event_data
{
    /** Tx_frame_ready event information. */
    uu_wlan_cap_ev_tx_frame_ready_t  tx_ready;
    /** Cca_status confirm event information. */
    uu_wlan_cap_ev_cca_status_t      cca_status;
    /** Rx_start_ind event information. */
    uu_wlan_cap_ev_rx_start_ind_t    rx_vec;
    /** Rx_data ind event information. */
    uu_wlan_cap_ev_rx_data_ind_t     rx_data_ind;
    /** Rx_end_indication event information. */
    uu_wlan_cap_ev_rx_end_ind_t      rx_end_ind;
} uu_wlan_cap_event_data_t;


/** CAP event structure.
 * Contains event and its event data structure.
 */
typedef struct uu_wlan_cap_event
{
    /** Type of Event */
    uu_wlan_cap_event_type_t       ev;
    /** Union of all event data structures */
    uu_wlan_cap_event_data_t       u;
} uu_wlan_cap_event_t;


/** Initiates CAP module
 * Return UU_FAILURE if fails or UU_SUCCESS in success, 32 bits in length
 */
extern uu_int32 uu_wlan_cap_init(uu_void);

/** This function de-initiates CAP module */
extern uu_void uu_wlan_cap_shutdown(uu_void);

/** Sets the received frame status for CAP module.
 * After receiving frame from PHY, Rx module updated its status to CAP.
 * CAP changes its state, according to this value set by Rx module.
 * @param[in] status - Status from RX-module(uu_wlan_rx_handler_return_value_t). 
 */
extern uu_void uu_wlan_cap_set_recv_pkt_status(uu_wlan_rx_handler_return_value_t status);

/** This is called by RX module.
 * Stops transmitting beacon frame, when Beacon is received in IBSS mode.
 * After this, the CAP will stop contending for the Beacon queue.
 * Since tx_ready for the beacon queue will be set by UMAC, so while after
 * receiving beacon frame, we need to stop contending for Beacon queue,
 * so we reset the tx_ready for Beacon queue as 0, and clear beacon frame
 * and set the register uu_wlan_last_beacon_tx_r as 0.
 * This is also called by CAP module internally in contend state, when we get
 * the Beacon frame to transmit but we should not transmit the Beacon.
 */
extern uu_void uu_wlan_cap_stop_beacon_tx (uu_void);

UU_END_DECLARATIONS

#endif /* __UU_WLAN_CAP_IF_H__  */

